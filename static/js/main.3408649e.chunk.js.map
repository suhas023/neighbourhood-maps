{"version":3,"sources":["components/aside/Aside.js","components/marker/Marker.js","components/map/Map.js","components/error/Error.js","App.js","serviceWorker.js","index.js"],"names":["Aside","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateQuery","e","onUpdateQuery","target","value","trimLeft","toLowerCase","toggleShowList","setState","prevState","showList","handleItemClick","restaurant","window","innerWidth","onSelectRestaurant","id","state","_this2","asideHeight","containerState","react_default","a","createElement","className","aria-label","role","autoFocus","placeholder","query","onChange","aria-activedescendant","tabIndex","places","map","_ref","index","key","selectedID","onClick","onKeyPress","name","Icon_default","Component","Marker","displayInfo","info","concat","url","featured_image","user_rating","aggregate_rating","rating_text","votes","marker","setAnimation","google","maps","Animation","BOUNCE","setTimeout","onShowInfoWindow","uluru","lat","parseFloat","location","latitude","lng","longitude","position","addListener","nextProps","setMap","Map","showInfoWindow","infoWindow","setContent","setAnchor","mapLoaded","onDisplayGoogleMaps","then","mapState","zoom","center","styles","mapStyle","mapDOM","document","getElementById","InfoWindow","event","_this3","components_marker_Marker","Error","console","log","errorMessage","message","reload","App","gm_authFailure","err","toConsumableArray","getGoogleMaps","googleMapsPromise","Promise","resolve","resolveGoogleMapsPromise","script","src","async","body","appendChild","selectRestaurant","selectedRestaurantID","filteredRestaurants","restaurants","filter","includes","fetch","headers","user-key","Accept","res","status","json","nearby_restaurants","catch","length","error_Error","join","components_aside_Aside","components_map_Map","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App_0","URL","process","href","origin","addEventListener","response","contentType","get","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3408649e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Aside.css';\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\n\r\nclass Aside extends Component{\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      showList: true,\r\n    }\r\n  }\r\n\r\n  updateQuery = (e) => {\r\n    this.props.onUpdateQuery(e.target.value.trimLeft().toLowerCase());\r\n  }\r\n\r\n  toggleShowList = () => {\r\n    this.setState((prevState) => {\r\n      return {showList: !prevState.showList}\r\n    });\r\n  }\r\n\r\n  handleItemClick = (restaurant) => {\r\n    if(window.innerWidth < 600)\r\n      this.toggleShowList();\r\n    this.props.onSelectRestaurant(restaurant.id);\r\n  }\r\n\r\n  render() {\r\n    let asideHeight = this.state.showList ? \"full-height\" : \"min-height\";\r\n    let containerState = this.state.showList ? \"show\" : \"hide\";\r\n    return (\r\n      <aside className={asideHeight}>\r\n        <div className={containerState + \" container\"}>\r\n          <input\r\n            aria-label=\"filter restaurants\" \r\n            role=\"search\"\r\n            autoFocus\r\n            placeholder=\"Filter\"\r\n            value={this.props.query}\r\n            onChange={this.updateQuery}\r\n          />\r\n          <ul role=\"listbox\" aria-label=\"restaurants\" aria-activedescendant=\"0\" tabIndex=\"0\">\r\n            {\r\n              this.props.places.map(({restaurant}, index) => \r\n                <li key={restaurant.id}>\r\n                  <span\r\n                    id={index}\r\n                    role='listitem'\r\n                    tabIndex=\"0\"\r\n                    className={restaurant.id === this.props.selectedID ? \"highlight\": \"none\"}\r\n                    onClick={() => this.handleItemClick(restaurant)}\r\n                    onKeyPress={() => this.handleItemClick(restaurant)}\r\n                  >\r\n                    {restaurant.name}\r\n                  </span>\r\n                </li>\r\n              )\r\n            }\r\n          </ul>\r\n        </div>\r\n        <button className=\"toggle\" onClick={this.toggleShowList} aria-label=\"menu\">\r\n            {\r\n              this.state.showList ?  <Icon className=\"icon\">arrow_drop_down</Icon> \r\n              : <Icon className=\"icon\">arrow_drop_up</Icon>\r\n            }\r\n         \r\n        </button>\r\n      </aside>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Aside;","import  { Component } from 'react';\r\nimport './Marker.css';\r\n\r\nclass Marker extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let {restaurant, map, selectedID} = props;\r\n    const uluru = {lat: parseFloat(restaurant.location.latitude), lng: parseFloat(restaurant.location.longitude)};\r\n    const marker = new window.google.maps.Marker({\r\n      position: uluru,\r\n      map: map,\r\n    });\r\n\r\n    marker.addListener(\"click\", this.displayInfo);\r\n    this.marker = marker;\r\n\r\n    if(selectedID === restaurant.id)\r\n      this.displayInfo();\r\n  }\r\n\r\n  displayInfo = () => {\r\n    let {restaurant} = this.props;\r\n    let info = `\r\n    <div class=\"info-window\"\r\n      <h3>\r\n        <a href=\"${restaurant.url}\" target=\"_blank\">${restaurant.name}</a>\r\n      </h3>\r\n      ${restaurant.featured_image ? `<img src=\"${restaurant.featured_image}\" alt=\"restaurant ${restaurant.name}'s image\">`:''}\r\n      <span>\r\n        Rating: ${restaurant.user_rating.aggregate_rating} / 5  ${restaurant.user_rating.rating_text} ${restaurant.user_rating.votes} votes\r\n      </span>\r\n      <span>\r\n        <small>via Zomato</small>\r\n      </span>\r\n    </div>\r\n    `;\r\n    //bounce the marker once\r\n    this.marker.setAnimation(window.google.maps.Animation.BOUNCE);\r\n    setTimeout(() => this.marker.setAnimation(null), 1000);\r\n    // call parent's function to display \r\n    this.props.onShowInfoWindow(this.marker, restaurant, info);\r\n  }\r\n\r\n  //display infow window if this restaurant is selected in list\r\n  shouldComponentUpdate(nextProps) {\r\n    if(nextProps.selectedID === this.props.restaurant.id && nextProps.selectedID !== this.props.selectedID) {\r\n      this.displayInfo();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.marker.setMap(null);\r\n  }\r\n  \r\n  render() {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default Marker;\r\n","import React, { Component } from 'react';\r\nimport Marker from '../marker/Marker';\r\nimport './Map.css';\r\nimport mapStyle from './mapStyle';\r\n\r\nclass Map extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      mapLoaded: false\r\n    }\r\n    this.map = null;\r\n    this.infoWindow = null;\r\n  }\r\n\r\n  showInfoWindow = (marker, restaurant, info) => {\r\n    this.infoWindow.setContent(info);\r\n    this.infoWindow.setAnchor(marker);\r\n    this.props.onSelectRestaurant(restaurant.id);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Once the Google Maps API has finished loading, initialize the map\r\n    this.props.onDisplayGoogleMaps().then((google) => {\r\n      let mapState = {\r\n        zoom: 15,\r\n        center: {lat: 40.732013, lng: -73.996155},\r\n        styles : mapStyle\r\n      }\r\n      let mapDOM = document.getElementById('map');\r\n      this.map = new google.maps.Map(mapDOM, mapState);\r\n      this.infoWindow = new google.maps.InfoWindow();\r\n      // deselect the restaurant when infowindow is closed \r\n      google.maps.event.addListener(this.infoWindow, 'closeclick', () => {  \r\n        this.props.onSelectRestaurant(null);\r\n    });  \r\n      // set mapLoaded state to true\r\n      this.setState({mapLoaded: true});\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"map\" aria-label=\"map location\"  role=\"application\">\r\n        {\r\n          this.state.mapLoaded && this.props.places ? \r\n            this.props.places.map(({restaurant}) => \r\n              <Marker \r\n                key={restaurant.id}\r\n                restaurant={restaurant}\r\n                map={this.map}\r\n                selectedID={this.props.selectedID}\r\n                onShowInfoWindow={this.showInfoWindow}\r\n              />\r\n            ) \r\n          : false\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport './Error.css';\r\n\r\nfunction Error(props) {\r\n  console.log(`Error! ${props.errorMessage}`);\r\n  return (\r\n    <div className=\"modal\" role=\"dialog\">\r\n      <h3 className=\"err-head\">Error Occoured</h3>\r\n      <h5 className=\"err-meg\">{props.errorMessage.message || props.errorMessage}</h5>\r\n      <button className=\"err-btn\" onClick={()=>window.location.reload(true)}>Reload</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Error;","import React, { Component } from 'react';\nimport Aside from './components/aside/Aside';\nimport Map from './components/map/Map';\nimport Error from './components/error/Error';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      restaurants: [],\n      filteredRestaurants: [],\n      selectedRestaurantID: null,\n      query: '',\n      err: []\n    }\n    // Start Google Maps API loading since we know we'll soon need it\n    this.getGoogleMaps();\n    //handle Google Map's API error\n    window.gm_authFailure = this.gm_authFailure;\n  }\n\n  gm_authFailure = () => {\n    this.setState((prevState) => {\n      return {err: [...prevState.err, 'Google Map Authorization Failed']};\n    });\n}\n\n  getGoogleMaps = () => {\n    // If we haven't already defined the promise, define it\n    if (!this.googleMapsPromise) {\n      this.googleMapsPromise = new Promise((resolve) => {\n        // Add a global handler for when the API finishes loading\n        window.resolveGoogleMapsPromise = () => {\n          // Resolve the promise\n          resolve(window.google);\n          // Tidy up\n          delete window.resolveGoogleMapsPromise;\n        };\n\n        // Load the Google Maps API\n        const script = document.createElement(\"script\");\n        const API = 'AIzaSyDA9RLo-1ZBGb-eQRBPWUpIB-Z97cuiZTM';\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${API}&callback=resolveGoogleMapsPromise`;\n        script.async = true;\n        document.body.appendChild(script);\n      });\n    }\n    // Return a promise for the Google Maps API\n    return this.googleMapsPromise;\n  }\n\n  selectRestaurant = (id) => {\n    if(this.state.selectedRestaurantID !== id)\n      this.setState({selectedRestaurantID: id});\n  }\n\n  updateQuery = (query) => {\n    this.setState((prevState) => {\n      let filteredRestaurants = prevState.restaurants.filter(({restaurant}) => restaurant.name.toLowerCase().includes(query));\n      return {query, filteredRestaurants};\n    });\n  }\n\n  //Get restaurant data from Zomato\n  componentDidMount() {\n    fetch('https://developers.zomato.com/api/v2.1/geocode?lat=40.732013&lon=-73.996155', {\n      headers: {\n        \"user-key\": \"0cdefc6dcd10b52bdd01175c3cdf4744\",\n        \"Accept\": \"application/json\"\n      }\n    })\n    .then(res => {\n      if(res.status !== 200)\n        throw(res);\n      return res.json();\n    })\n    .then(json => this.setState({restaurants: json.nearby_restaurants, filteredRestaurants: json.nearby_restaurants}))  \n    .catch(err => {\n      this.setState((prevState) => {\n        return {err: [...prevState.err, ' fetching restaurants']};\n      });\n      console.log(err); \n    });\n  }\n\n  render() {    \n    return (\n      <main>\n        {\n          this.state.err.length ? <Error errorMessage = {this.state.err.join(', ')} /> : false\n        }\n        <Aside \n          places={this.state.filteredRestaurants}\n          selectedID={this.state.selectedRestaurantID}\n          query={this.state.query}\n          onSelectRestaurant={this.selectRestaurant} \n          onUpdateQuery={this.updateQuery}\n        />\n        <Map \n          places={this.state.filteredRestaurants} \n          selectedID={this.state.selectedRestaurantID}\n          onSelectRestaurant={this.selectRestaurant}\n          onDisplayGoogleMaps={this.getGoogleMaps} \n        />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}